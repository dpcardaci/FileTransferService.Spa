@page "/"
@attribute [Authorize(Policy = "GroupMembership")]

@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@using Azure
@using Azure.Core
@using Azure.Storage
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Identity
@using System.Timers
@inject Microsoft.AspNetCore.Components.WebAssembly.Authentication.IAccessTokenProvider TokenProvider


@using Microsoft.Graph
@inject GraphServiceClient Client

<PageTitle>File Transfer Service (FTS)</PageTitle>

<div class="mt-2 ps-5 pe-5">

    <div class="mb-3">
        <label class="mb-1 text-secondary" for="uploadFileInput" id="uploadFileLabel">Select a file to upload <span style="color: crimson;">(Max size 1TB)</span>:</label>
        <InputFile class="form-control" @key="@(uploadFileInputKey)" id="uploadFileInput" OnChange="@OnFileSelectionChange" disabled="@(isUploading)"></InputFile>
    </div>

    @if (isUploading)
    {
        <div class="progress mb-3">
            <div class="progress-bar" style="width: @progressValue">@progressValue</div>
        </div>
    }

    <div class="mb-3 text-secondary">
        <span>Note: Ensure ingress files do not have file names containing CUI information.</span>
    </div>
    <div style="text-align:end">
        <button class="btn btn-primary" id="uploadFileSubmitButton" type="submit" @onclick="@Upload" disabled="@(!isValid || isUploading)">
            @if (isUploading)
            {
                <span class="spinner-grow spinner-grow-sm"></span>
            }
            Upload
        </button>
    </div>

    <div class="d-flex justify-content-around mt-5">
        <div class="card" style="width: 18em; min-height: 16em;">
            <div class="card-header">Frequently Asked Questions</div>
            <div class="card-body">
                <p class="card-text text-secondary">Have questions about the File Transfer Service? Please visit our FAQ by clicking the link below.</p>
                <NavLink class="nav-link card-link" href="faq">FAQ</NavLink>
            </div>
        </div>
        <div class="card" style="width: 18em; min-height: 16em;">
            <div class="card-header">User's Guide</div>
            <div class="card-body">
                <p class="card-text text-secondary">Want detailed guidance on the use of the File Transfer Service? Please download the "User's Guide'" by clicking the link below.</p>
                <a href="./Downloads/User Guide.pdf" download class="card-link">Download User's Guide</a>
            </div>
        </div>
        <div class="card" style="width: 18em; min-height: 16em;">
            <div class="card-header">Report an Issue</div>
            <div class="card-body">
                <p class="card-text text-secondary">Did you run in to an issue? Please the TC support channel using the "@@tchelp" tag.</p>
                <a href="https://chat.il4.dso.mil/usaf-76-sweg/channels/tcsupport" class="card-link">Message support</a>
            </div>
        </div>
    </div>
</div>

@code {
    private string accessToken = String.Empty;
    private Microsoft.Graph.Models.User? user;

    private long maxFileSize = 1099511627776;
    private bool exceedsMaxFileSize = false;

    private bool isValid = false;
    private bool isUploading = false;
    private string progressValue = "0%";
    private Timer DelayedHideProgressBarTimer = new Timer
    {
        Interval = 2000,
        AutoReset = false,
        Enabled = true
    };

    private IBrowserFile? currentFile;
    public Guid uploadFileInputKey;


    protected override async Task OnInitializedAsync()
    {
        DelayedHideProgressBarTimer.Elapsed += OnDelayedHideProgressBar;
        user = await Client.Me.GetAsync();

        var accessTokenResult = await TokenProvider.RequestAccessToken();
        if (accessTokenResult.TryGetToken(out var token))
        {
            accessToken = token.Value;
        }
        Console.WriteLine($"Access Token: {accessToken}");
    }

    private void OnFileSelectionChange(InputFileChangeEventArgs e)
    {
        Console.WriteLine("File selected", e.File.Name);
        isValid = Validate(e.File);
        if (isValid)
        {
            currentFile = e.File;
        }
    }

    private void OnProgressUpdated(Object sender,ProgressUpdatedEventArgs e)
    {
        Console.WriteLine($"New progress update: {e.FormattedStringValue}");
        progressValue = e.FormattedStringValue;
        StateHasChanged();
    }

    private void OnDelayedHideProgressBar(Object sender, ElapsedEventArgs e)
    {
        isUploading = false;
        progressValue = "0%";
        StateHasChanged();
        DelayedHideProgressBarTimer.Stop();
    }

    private async Task Upload()
    {
        try
        {
            string baseStoragePath = "blob.core.usgovcloudapi.net";
            var accountName = configuration.GetSection("AzureStorageConfiguration")["AccountName"];
            var uploadContainer = configuration.GetSection("AzureStorageConfiguration")["UploadContainer"];
            var sasToken = configuration.GetSection("AzureStorageConfiguration")["SasToken"];

            if (accountName != null 
                && uploadContainer != null 
                && currentFile != null
                && sasToken != null)
            {
                string path = $"https://{accountName}.{baseStoragePath}/{uploadContainer}/{currentFile.Name}";
                var azureBlobUri = new Uri(path);

                AzureSasCredential sasCredentials = new AzureSasCredential(sasToken);
                BlobClient blobClient = new BlobClient(azureBlobUri, sasCredentials, new BlobClientOptions());

                UploadProgressHandler uploadProgressHandler = new UploadProgressHandler
                {
                    FileSize = currentFile.Size
                };
                uploadProgressHandler.ProgressUpdated += OnProgressUpdated;

                BlobUploadOptions blobUploadOptions = new BlobUploadOptions
                {
                    HttpHeaders = new BlobHttpHeaders
                    {
                        ContentType =
                                    currentFile.ContentType
                    },
                    TransferOptions = new StorageTransferOptions
                    {
                        InitialTransferSize = 1024 * 1024 * 90,
                        MaximumConcurrency = 20,
                        MaximumTransferSize = 1024 * 1024 * 90
                    },
                    ProgressHandler = uploadProgressHandler
                };

                isUploading = true;
                await blobClient.UploadAsync(currentFile.OpenReadStream(maxFileSize), blobUploadOptions);
                Reset();

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private bool Validate(IBrowserFile file)
    {
        if(file != null)
        {
            exceedsMaxFileSize = !(file.Size < maxFileSize);
            if (!exceedsMaxFileSize)
            {
                return true;
            }
            return false;
        }
        return false;
    }

    private void Reset()
    {
        uploadFileInputKey = Guid.NewGuid();
        currentFile = null;
        exceedsMaxFileSize = false;
        isValid = false;

        DelayedHideProgressBarTimer.Start();
        
    }

}
